{"version":3,"file":"static/js/869.f10b2f8e.chunk.js","mappings":"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","sources":["components/UI/fold/Fold.tsx","components/UI/navigation/Navigation.tsx","store2/actions/CompareActions.ts","components/compare/bodyCompare/topCompare/leftCompare/LeftCompare.tsx","components/compare/bodyCompare/topCompare/topSlider/TopSlider.tsx","components/compare/bodyCompare/topCompare/TopCompare.tsx","components/compare/bodyCompare/bottomCompare/BottomCompare.tsx","components/compare/bodyCompare/buttonComapre/ButtonComapre.tsx","hooks/useItemsClick.tsx","components/compare/bodyCompare/itemsCompare/ItemsCompare.tsx","components/compare/bodyCompare/BodyCompare.tsx","components/compare/MainCompare.tsx","pages/Compare.tsx"],"sourcesContent":["import React, { type FC, useEffect, useRef } from 'react'\r\nimport './fold.scss'\r\ninterface FooterProps {\r\n    slice?: number\r\n    children?: React.ReactNode\r\n    changeName?: boolean\r\n    lock?: boolean\r\n    navigationClass?: string\r\n    foldClass?: string\r\n    value: boolean\r\n    foldActive?: (a: boolean) => void\r\n    foldChange?: (a: any) => void\r\n}\r\nconst Fold: FC<FooterProps> = ({ value, foldActive = () => {}, foldChange = () => {}, children, slice = 1, foldClass = 'origin' }) => {\r\n    const bodyRef = useRef<HTMLDivElement>(null)\r\n\r\n    useEffect(() => {\r\n        const sliceChildren: any = [].slice.call(bodyRef?.current?.children)\r\n\r\n        if (bodyRef.current && sliceChildren.length > slice && !value) {\r\n            sliceChildren.slice(slice, sliceChildren.length).forEach((el: HTMLElement) => {\r\n                el.style.display = 'none'\r\n            })\r\n            let sliceHeight = 0\r\n            sliceChildren.slice(0, slice).forEach((el: HTMLElement) => {\r\n                sliceHeight += el.offsetHeight\r\n            })\r\n            bodyRef.current.style.height = `${sliceHeight}px`\r\n        } else {\r\n            foldActive(false)\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const sliceChildren: any = [].slice.call(bodyRef?.current?.children)\r\n        if (bodyRef.current && sliceChildren.length > slice) {\r\n            if (value) {\r\n                let sliceHeight = 0\r\n                console.log(bodyRef.current, 'ty')\r\n\r\n                sliceChildren.slice(0, slice).forEach((el: HTMLElement) => {\r\n                    sliceHeight += el.offsetHeight\r\n                })\r\n                bodyRef.current.style.height = `${sliceHeight}px`\r\n                sliceChildren.slice(slice, sliceChildren.length).forEach((el: HTMLElement) => {\r\n                    el.style.display = 'inherit'\r\n                })\r\n                bodyRef.current.style.height = `${bodyRef.current.scrollHeight}px`\r\n                setTimeout(() => {\r\n                    bodyRef.current && (bodyRef.current.style.height = 'auto')\r\n                }, 300)\r\n            } else {\r\n                let sliceHeight = 0\r\n                bodyRef.current.style.height = `${bodyRef.current.scrollHeight}px`\r\n                sliceChildren.slice(0, slice).forEach((el: HTMLElement) => {\r\n                    sliceHeight += el.offsetHeight\r\n                })\r\n                bodyRef.current.style.height = `${sliceHeight}px`\r\n\r\n                setTimeout(() => {\r\n                    sliceChildren.slice(slice, sliceChildren.length).forEach((el: HTMLElement) => {\r\n                        el.style.display = 'none'\r\n                    })\r\n                    bodyRef.current && (bodyRef.current.style.height = 'auto')\r\n                }, 300)\r\n            }\r\n        }\r\n    }, [value])\r\n\r\n    return (\r\n        <div className={`Fold ${foldClass}`}>\r\n            <div ref={bodyRef} className=\"Fold__body\">{\r\n                Array.isArray(children) && children.slice(0, children.length).map((e: any, id: number) =>\r\n                    <div key={id} className=\"Fold__item\">{e}</div>\r\n                )\r\n            }</div>\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Fold\r\n","import React, { type FC, type ReactNode } from 'react'\r\nimport './navigation.scss'\r\ninterface FooterProps {\r\n    name?: string\r\n    children?: ReactNode\r\n    changeName?: boolean\r\n    lock?: boolean\r\n    navigationClass?: string\r\n}\r\nconst Navigation: FC<FooterProps> = ({ children, navigationClass = 'origin' }) => {\r\n    return (\r\n        <div className={`Navigation ${navigationClass}`}>{children}</div>\r\n\r\n    )\r\n}\r\n\r\nexport default Navigation\r\n","import { getCompare, removeItemFromCompare, removeItemFromCompareByType } from '../../https/compareApi'\r\nimport { type ICompareItem } from '../../utils/interfaces'\r\nimport { catalogSlice } from '../reducers/CatalogSlice'\r\nimport { compareSlice } from '../reducers/CompareSlice'\r\nimport { navbarSlice } from '../reducers/NavBarSlice'\r\nimport { type AppDispatch, store } from '../store'\r\n\r\nexport const putCompare = () => async (dispatch: AppDispatch) => {\r\n    const currentState = store.getState()\r\n    const { user } = currentState.reducer.catalog\r\n    const { setCompareTypes, setActiveType, setInformations, setLoad } = compareSlice.actions\r\n\r\n    const { setCompare } = catalogSlice.actions\r\n    try {\r\n        dispatch(setLoad(true))\r\n        const data = await getCompare({ id: user.compare })\r\n        dispatch(setCompare(data.compareItems))\r\n\r\n        const typesArr: any = []\r\n        data.compareItems.forEach((el: any) => {\r\n            if (!typesArr.includes(el.product.type.name)) {\r\n                typesArr.push(el.product.type.name)\r\n            }\r\n\r\n            dispatch(setCompareTypes(typesArr))\r\n            dispatch(setActiveType(typesArr[0]))\r\n            dispatch(setInformations(data.compareItems.find((el: any) => el.product.type.name === typesArr[0]).product.information))\r\n        })\r\n    } catch (error) {\r\n        console.log(error)\r\n    } finally {\r\n        dispatch(setLoad(false))\r\n    }\r\n}\r\n\r\nexport const updateCompare = () => async (dispatch: AppDispatch) => {\r\n    const currentState = store.getState()\r\n    const { compare } = currentState.reducer.catalog\r\n    const { activeType } = currentState.reducer.compare\r\n\r\n    const { setCompareTypes, setActiveType, setInformations, setActiveTypeLoad } = compareSlice.actions\r\n\r\n    try {\r\n        dispatch(setActiveTypeLoad(false))\r\n\r\n        const typesArr: any = []\r\n        compare.forEach((el: any) => {\r\n            if (!typesArr.includes(el.product.type.name)) {\r\n                typesArr.push(el.product.type.name)\r\n            }\r\n        })\r\n        dispatch(setCompareTypes(typesArr))\r\n\r\n        if (typesArr.length === 0) {\r\n            dispatch(setActiveType('Типы'))\r\n        } else {\r\n            if (!compare.find((ell: any) => ell.product.type.name === activeType)) {\r\n                dispatch(setActiveType(typesArr[0]))\r\n                const item = compare.find((ell: ICompareItem) => ell.product.type.name === typesArr[0])\r\n                item && dispatch(setInformations(item.product.information))\r\n            }\r\n        }\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport const removeByType = () => async (dispatch: AppDispatch) => {\r\n    const currentState = store.getState()\r\n    const { user } = currentState.reducer.catalog\r\n    const { activeType } = currentState.reducer.compare\r\n    const navbar = navbarSlice.actions\r\n    const { setActiveTypeLoad } = compareSlice.actions\r\n\r\n    const { setCompare } = catalogSlice.actions\r\n    try {\r\n        removeItemFromCompareByType({ type: activeType, compareId: user.compare }).then(data => {\r\n            dispatch(navbar.setCompare(data.compareItems.length))\r\n            dispatch(setCompare(data.compareItems))\r\n            dispatch(setActiveTypeLoad(false))\r\n        })\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport const changeActiveType = (el: any) => async (dispatch: AppDispatch) => {\r\n    const currentState = store.getState()\r\n    const { compare } = currentState.reducer.catalog\r\n    const { setActiveType, setInformations } = compareSlice.actions\r\n\r\n    dispatch(setActiveType(el))\r\n    const item = compare.find((ell: ICompareItem) => ell.product.type.name === el)\r\n    item && dispatch(setInformations(item.product.information))\r\n}\r\n\r\nexport const removeItem = (id: any, compareId: any) => async (dispatch: AppDispatch) => {\r\n    const currentState = store.getState()\r\n    const { compare } = currentState.reducer.catalog\r\n    const navbar = currentState.reducer.navbar\r\n    const { setCompare } = catalogSlice.actions\r\n    const navbarSl = navbarSlice.actions\r\n    try {\r\n        dispatch(setCompare([...compare.filter((el: any) => el.product._id !== id)]))\r\n        dispatch(navbarSl.setCompare(navbar.compare - 1))\r\n\r\n        removeItemFromCompare({ id, compareId }).then((data: any) => {\r\n            console.log(data)\r\n        })\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n","import { useAppDispatch } from '../../../../../hooks/reduxHooks'\r\nimport { removeByType } from '../../../../../store2/actions/CompareActions'\r\n\r\nconst LeftCompare = () => {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const dispatchRemoveByType = () => {\r\n        dispatch(removeByType())\r\n    }\r\n\r\n    return (\r\n        <div className=\"main-compare__top-left\">\r\n            <div onClick={dispatchRemoveByType} className=\"main-compare__clear _icon-delete\">Очистить</div>\r\n            <div className=\"main-compare__item\">Модель Фотоаппарата</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LeftCompare\n","import { Controller } from 'swiper'\r\nimport { Swiper, SwiperSlide } from 'swiper/react'\r\nimport { API_URL } from '../../../../../utils/config'\r\nimport { removeItem } from '../../../../../store2/actions/CompareActions'\r\nimport { useAppDispatch, useAppSelector } from '../../../../../hooks/reduxHooks'\r\nimport './topSlider.scss'\r\nimport { type ICompareItem } from '../../../../../utils/interfaces'\r\n\r\nconst breakpoints = {\r\n    786: {\r\n\r\n        spaceBetween: 55,\r\n        slidesPerView: 3\r\n    },\r\n    982: {\r\n\r\n        spaceBetween: 50,\r\n        slidesPerView: 4\r\n    },\r\n    1213: {\r\n        slidesPerView: 4,\r\n        spaceBetween: 118\r\n\r\n    }\r\n\r\n}\r\nconst TopSlider = ({ setFirstSwiper, secondSwiper }: { setFirstSwiper: (a: any) => void, secondSwiper: any }) => {\r\n    const { activeType } = useAppSelector(state => state.reducer.compare)\r\n    const { user, compare } = useAppSelector(state => state.reducer.catalog)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    return (\r\n        <div className=\"main-compare__top-slider\">\r\n            <div className=\"main-compare__top-slider-cover\">\r\n\r\n                <Swiper\r\n                    slidesPerView={2}\r\n                    spaceBetween={0}\r\n                    className=\"swiperCompare\"\r\n                    modules={[Controller]}\r\n                    onSwiper={(e) => { setFirstSwiper(e) }}\r\n\r\n                    controller={{ control: secondSwiper }}\r\n                    breakpoints={breakpoints}\r\n                >\r\n                    {compare.map((el: ICompareItem) => {\r\n                        if (el.product.type.name === activeType) {\r\n                            return (<SwiperSlide\r\n                                key={el._id}>\r\n                                <div className=\"swiperCompare__item item-swiperCompare\">\r\n                                    <div className=\"item-swiperCompare__image-cover\">\r\n                                        <div className=\"item-swiperCompare__image\">\r\n                                            <img src={`${API_URL}/${el.product.name}/${JSON.parse(el.product.images)[0]}`} alt=\"\"/>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div onClick={async () => { await dispatch(removeItem(el.product._id, user.compare)) }} className=\"item-swiperCompare__delete\"></div>\r\n                                    <div className=\"item-swiperCompare__name\">{el.product.name}</div>\r\n                                    <div className=\"item-swiperCompare__brand\">{el.product.brand.name}</div>\r\n                                </div>\r\n                            </SwiperSlide>)\r\n                        }\r\n                    }\r\n                    )}\r\n                </Swiper>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TopSlider\r\n","import React from 'react'\r\nimport LeftCompare from './leftCompare/LeftCompare'\r\nimport TopSlider from './topSlider/TopSlider'\r\n\r\nconst TopCompare = ({ setFirstSwiper, secondSwiper }: { setFirstSwiper: (a: any) => void, secondSwiper: any }) => {\r\n    return (\r\n        <div className=\"main-compare__top\">\r\n            <LeftCompare/>\r\n            <TopSlider setFirstSwiper={setFirstSwiper} secondSwiper={secondSwiper}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TopCompare\n","import Fold from '../../../UI/fold/Fold'\r\nimport { Swiper, SwiperSlide } from 'swiper/react'\r\nimport { Controller } from 'swiper'\r\nimport { compareSlice } from '../../../../store2/reducers/CompareSlice'\r\nimport { useAppDispatch, useAppSelector } from '../../../../hooks/reduxHooks'\r\nimport { type ICompareItem, type IInformation } from '../../../../utils/interfaces'\r\nimport './bottomCompare.scss'\r\nconst BottomCompare = ({ setSecondSwiper, firstSwiper }: { setSecondSwiper: (a: typeof firstSwiper) => void, firstSwiper: any }) => {\r\n    const { compare } = useAppSelector(state => state.reducer.catalog)\r\n    const { activeType, fold, informations } = useAppSelector(state => state.reducer.compare)\r\n    const { setFold } = compareSlice.actions\r\n    const dispatch = useAppDispatch()\r\n\r\n    const dispatchFold = (bool: boolean) => {\r\n        dispatch(setFold(bool))\r\n    }\r\n\r\n    return (\r\n        <div className=\"main-compare__bottom\">\r\n            <div className=\"main-compare__bottom-left\">\r\n                <Fold value={fold} foldChange={dispatchFold} slice={2} >\r\n                    { informations.map((el: IInformation) =>\r\n                        <div key={el._id} className=\"main-compare__bottom-left__item\">{el.name}</div>\r\n                    )}\r\n                </Fold>\r\n            </div>\r\n            <div className=\"item-swiperCompare__bottom-right\">\r\n                <Swiper\r\n                    slidesPerView={2}\r\n                    className=\"swiperCompare2\"\r\n                    spaceBetween={9}\r\n                    modules={[Controller]}\r\n                    onSwiper={(e) => { setSecondSwiper(e) }}\r\n                    controller={{ control: firstSwiper }}\r\n                    breakpoints={{\r\n                        786: {\r\n                            spaceBetween: 55,\r\n\r\n                            slidesPerView: 3\r\n                        },\r\n                        982: {\r\n\r\n                            spaceBetween: 55,\r\n                            slidesPerView: 4\r\n                        },\r\n                        1213: {\r\n                            slidesPerView: 4,\r\n                            spaceBetween: 120\r\n\r\n                        }\r\n\r\n                    }}\r\n                >\r\n                    {compare.map((el: ICompareItem) => {\r\n                        if (el.product.type.name === activeType) {\r\n                            return (\r\n                                <SwiperSlide key={el._id}>\r\n                                    <div className=\"swiperCompare2__item item-swiperCompare2\">\r\n                                        <Fold foldClass='ggg' value={fold} foldChange={(e: any) => dispatch(setFold(e))} slice={2} >\r\n                                            {el.product.information.map((m: any) => <div key={m.description} className=\"item-swiperCompare2__item\">{m.description}</div>)}\r\n                                        </Fold>\r\n                                    </div>\r\n                                </SwiperSlide>\r\n\r\n                            )\r\n                        }\r\n                    }\r\n\r\n                    )}\r\n\r\n                </Swiper>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BottomCompare\r\n","import Button from '../../../UI/button/Button'\r\n\r\nimport { compareSlice } from '../../../../store2/reducers/CompareSlice'\r\nimport { useAppDispatch, useAppSelector } from '../../../../hooks/reduxHooks'\r\n\r\nconst ButtonComapre = () => {\n    const { fold } = useAppSelector(state => state.reducer.compare)\r\n    const { setFold } = compareSlice.actions\r\n    const dispatch = useAppDispatch()\r\n    const dispatchFold = () => {\r\n        dispatch(setFold(!fold))\r\n    }\r\n    return (\r\n        <div className=\"main-compare__button\">\r\n            <Button onClick={dispatchFold} className='compare g'>{fold ? 'Свернуть' : 'Показать все'}</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ButtonComapre\n","import { type Dispatch, type RefObject, type SetStateAction, useCallback, useEffect } from 'react'\r\n\r\nconst useItemsClick = ({ actionRef, actionRef2, setitemsView }: { actionRef: RefObject<HTMLDivElement>, actionRef2: RefObject<HTMLDivElement>, setitemsView: Dispatch<SetStateAction<boolean>> }) => {\n    useEffect(() => {\r\n        document.addEventListener('click', addClick)\r\n        return () => {\r\n            document.removeEventListener('click', addClick)\r\n        }\r\n    }, [])\r\n\r\n    const addClick = useCallback(\r\n        (e: MouseEvent) => {\r\n            if (actionRef.current && actionRef2.current) {\r\n                if (!actionRef2.current.contains(e.target as Node) && e.target !== actionRef.current) {\r\n                    setitemsView(false)\n                }\r\n            }\r\n        },\r\n        []\r\n    )\n}\r\n\r\nexport default useItemsClick\n","import { useRef, useState } from 'react'\r\nimport { changeActiveType, removeByType } from '../../../../store2/actions/CompareActions'\r\nimport useItemsClick from '../../../../hooks/useItemsClick'\r\nimport { useAppDispatch, useAppSelector } from '../../../../hooks/reduxHooks'\r\nimport './itemsComapre.scss'\r\nimport { type ICompareItem } from '../../../../utils/interfaces'\r\nconst ItemsCompare = () => {\n    const { activeType, compareTypes } = useAppSelector(state => state.reducer.compare)\r\n    const { compare } = useAppSelector(state => state.reducer.catalog)\r\n    const dispatch = useAppDispatch()\r\n    const actionRef = useRef<HTMLDivElement>(null)\r\n    const actionRef2 = useRef<HTMLDivElement>(null)\r\n    const [itemsView, setitemsView] = useState<boolean>(false)\r\n\r\n    useItemsClick({ actionRef, actionRef2, setitemsView })\r\n\r\n    const onSetItemView = () => {\r\n        setitemsView(prev => !prev)\r\n    }\r\n\r\n    const dispatchByType = () => {\r\n        dispatch(removeByType())\r\n    }\r\n\r\n    const dispatchChangeActiveType = (string: string) => () => {\r\n        dispatch(changeActiveType(string))\r\n    }\r\n    return (\r\n        <div className=\"Compare__items items-compare\">\r\n            <div ref={actionRef2} className=\"items-compare__cover\" onClick={onSetItemView}>\r\n                <div className={itemsView ? 'items-compare__action active' : 'items-compare__action'}> <span></span></div>\r\n            </div>\r\n\r\n            <div onClick={dispatchByType} className=\"items-compare__delete _icon-delete\"></div>\r\n\r\n            <div ref={actionRef} className={itemsView ? 'items-compare__body active' : 'items-compare__body'}>\r\n                {compareTypes.map((el: string) =>\r\n                    <div\r\n                        key={el}\r\n                        onClick={dispatchChangeActiveType(el)}\r\n                        className={activeType === el ? 'items-compare__item active' : 'items-compare__item'}>\r\n                        {el} ({compare.filter((ell: ICompareItem) => ell.product.type.name === el).length})\r\n                    </div>)\r\n                }\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ItemsCompare\n","import React, { useState } from 'react'\r\nimport TopCompare from './topCompare/TopCompare'\r\nimport BottomCompare from './bottomCompare/BottomCompare'\r\nimport ButtonComapre from './buttonComapre/ButtonComapre'\r\nimport ItemsCompare from './itemsCompare/ItemsCompare'\r\nimport { useAppSelector } from '../../../hooks/reduxHooks'\r\nimport './BodyCompare.scss'\r\nconst BodyCompare = () => {\r\n    const { compare } = useAppSelector(state => state.reducer.catalog)\r\n    const [firstSwiper, setFirstSwiper] = useState(null)\r\n    const [secondSwiper, setSecondSwiper] = useState(null)\r\n    return (\r\n        <div className=\"Compare__topic\">\r\n            <div className=\"Compare__title\">СРАВНИТЬ <span>{compare.length} ТОВАРОВ</span></div>\r\n            <ItemsCompare/>\r\n            <div className=\"Compare__main main-compare\">\r\n                <TopCompare setFirstSwiper={setFirstSwiper} secondSwiper={secondSwiper}/>\r\n                <BottomCompare setSecondSwiper ={setSecondSwiper} firstSwiper={firstSwiper}/>\r\n                <ButtonComapre/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BodyCompare\n","import { useEffect } from 'react'\r\nimport BodyCompare from './bodyCompare/BodyCompare'\r\nimport Navigation from '../UI/navigation/Navigation'\r\nimport { compareSlice } from '../../store2/reducers/CompareSlice'\r\nimport { putCompare, updateCompare } from '../../store2/actions/CompareActions'\r\nimport { useAppDispatch, useAppSelector } from '../../hooks/reduxHooks'\r\nimport './compare.scss'\r\nimport SpinnerBody from '../UI/spinnerBody/SpinnerBody'\r\nconst MainCompare = () => {\r\n    const { compare } = useAppSelector(state => state.reducer.catalog)\r\n    const { activeType, load } = useAppSelector(state => state.reducer.compare)\r\n    const { setActiveTypeLoad } = compareSlice.actions\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(putCompare())\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        dispatch(updateCompare())\r\n    }, [compare])\r\n\r\n    useEffect(() => {\r\n        if (activeType !== 'Типы') {\r\n            dispatch(setActiveTypeLoad(true))\r\n        }\r\n    }, [activeType])\r\n\r\n    return (\r\n        <div className=\"Compare\">\r\n            <div className=\"Compare__container\">\r\n                <div className=\"Compare__body\">\r\n                    <Navigation>Главная / Сравнить товары</Navigation>\r\n                    {load\r\n                        ? <SpinnerBody/>\r\n                        : compare && compare.length !== 0\r\n                            ? <BodyCompare/>\r\n                            : <div className='Compare__none _icon-compare'>Не выбраны товары</div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MainCompare\r\n","import 'swiper/css'\r\nimport 'swiper/css/free-mode'\r\nimport 'swiper/css/navigation'\r\nimport 'swiper/css/thumbs'\r\nimport Layout from '../app/Layout'\r\nimport MainCompare from '../components/compare/MainCompare'\r\n\r\nconst Compare = () => {\r\n    return (\r\n        <Layout>\r\n            <MainCompare/>\r\n        </Layout>\r\n    )\r\n}\r\n\r\nexport default Compare\n"],"names":["_ref","value","foldActive","foldChange","children","slice","foldClass","bodyRef","useRef","useEffect","_bodyRef$current","sliceChildren","call","current","length","forEach","el","style","display","sliceHeight","offsetHeight","height","concat","_bodyRef$current2","console","log","scrollHeight","setTimeout","_jsx","className","ref","Array","isArray","map","e","id","navigationClass","removeByType","async","currentState","store","getState","user","reducer","catalog","activeType","compare","navbar","navbarSlice","actions","setActiveTypeLoad","compareSlice","setCompare","catalogSlice","removeItemFromCompareByType","type","compareId","then","data","dispatch","compareItems","error","LeftCompare","useAppDispatch","_jsxs","onClick","dispatchRemoveByType","breakpoints","spaceBetween","slidesPerView","setFirstSwiper","secondSwiper","useAppSelector","state","Swiper","modules","Controller","onSwiper","controller","control","product","name","SwiperSlide","src","API_URL","JSON","parse","images","alt","removeItem","_id","navbarSl","filter","removeItemFromCompare","brand","TopSlider","setSecondSwiper","firstSwiper","fold","informations","setFold","Fold","bool","information","m","description","ButtonComapre","Button","dispatchFold","actionRef","actionRef2","setitemsView","document","addEventListener","addClick","removeEventListener","useCallback","contains","target","ItemsCompare","compareTypes","itemsView","useState","useItemsClick","dispatchChangeActiveType","string","setActiveType","setInformations","item","find","ell","onSetItemView","prev","dispatchByType","BodyCompare","TopCompare","BottomCompare","MainCompare","load","setCompareTypes","setLoad","getCompare","typesArr","includes","push","Navigation","SpinnerBody","Compare","Layout"],"sourceRoot":""}