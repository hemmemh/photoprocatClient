{"version":3,"file":"static/js/357.59a1b320.chunk.js","mappings":"uIAQA,MA+BA,EA/BmBA,IAAyE,IAAxE,MAAEC,EAAK,SAAEC,EAAQ,YAAEC,EAAc,GAAE,UAAEC,EAAY,IAAiBJ,EAClF,MAAMK,GAAcC,EAAAA,EAAAA,QAA4B,OACzCC,EAAOC,IAAYC,EAAAA,EAAAA,WAAS,GAenC,OACIC,EAAAA,EAAAA,KAAA,YACIC,IAAKN,EACLO,KAAM,EACNC,QAlBQA,KACZL,GAAS,EAAK,EAkBVM,OAfOA,KACXN,GAAS,EAAM,EAeXJ,UAAS,cAAAW,OAAgBX,EAAS,KAAAW,OAAIR,EAAQ,SAAW,IACzDN,MAAOA,EACPe,SAdQC,IACZZ,EAAYa,UAAYb,EAAYa,QAAQC,MAAMC,OAAS,QAC3Df,EAAYa,UAAYb,EAAYa,QAAQC,MAAMC,OAAM,GAAAL,OAAME,EAAEI,OAAOC,aAAY,OACnFpB,EAASe,EAAEI,OAAOpB,MAAM,EAYpBE,YAAaA,GACN,C,sDC1BnB,MAOA,EAPoCH,IAA+C,IAA9C,SAAEuB,EAAQ,gBAAEC,EAAkB,UAAUxB,EACzE,OACIU,EAAAA,EAAAA,KAAA,OAAKN,UAAS,cAAAW,OAAgBS,GAAkBD,SAAEA,GAAe,C,kHCAzE,MAsFA,EAtFsCvB,IAAuG,IAAtG,WAAEyB,EAAa,IAAI,SAAEF,EAAQ,QAAEG,GAAU,EAAK,oBAAEC,EAAmB,eAAEC,EAAiB,UAAU5B,EACnI,MAAO6B,EAAQC,IAAarB,EAAAA,EAAAA,WAAS,GAC/BsB,GAAUzB,EAAAA,EAAAA,UACV0B,GAAY1B,EAAAA,EAAAA,UAIZ2B,GAAMC,EAAAA,EAAAA,cACR,KACI,MAAMC,EAAcC,OAAOC,WAEvBP,IADAK,GAAeV,GAInB,GAEJ,KAIJa,EAAAA,EAAAA,YAAU,KACN,MAAMH,EAAcC,OAAOC,WAS3B,OANIP,IADAK,GAAeV,IAMnBW,OAAOG,iBAAiB,SAAUN,GAC3B,KACHG,OAAOI,oBAAoB,SAAUP,EAAI,CAC5C,GACF,KAEHK,EAAAA,EAAAA,YAAU,KACNP,EAAQb,QAAQC,MAAMC,OAAS,MAC/BgB,OAAOG,iBAAiB,SAAUE,GAC3B,KACHL,OAAOI,oBAAoB,SAAUC,EAAG,IAE7C,IAEH,MAAMA,EAAKA,QAIXH,EAAAA,EAAAA,YAAU,KAEFT,GAEAE,EAAQb,QAAQC,MAAMC,OAAM,GAAAL,OAAMgB,EAAQb,QAAQI,aAAY,MAC9DoB,YAAW,KACPX,EAAQb,QAAQC,MAAMC,OAAS,MAAM,GACtC,OAEHuB,QAAQC,IAAI,SAAUf,GAEtBE,EAAQb,QAAQC,MAAMC,OAAM,GAAAL,OAAMgB,EAAQb,QAAQI,aAAY,MAC9DoB,YAAW,KACPX,EAAQb,QAAQC,MAAMC,OAAS,KAAK,GACrC,GACP,GACD,CAACS,IASJ,OACInB,EAAAA,EAAAA,KAAA,OAAKC,IAAKqB,EAAW5B,UAAS,gBAAAW,OAAkBa,GAAiBL,UAC7DsB,EAAAA,EAAAA,MAAA,OAAKzC,UAAU,0BAAyBmB,SAAA,EACpCb,EAAAA,EAAAA,KAAA,OAAKoC,QAASA,KAAQhB,GAAWiB,IAAUA,GAAK,EAAI3C,UAAWyB,EAAS,uDAAyD,wCAAwCN,SAAEyB,MAAMC,QAAQ1B,IAAaA,EAAS,MAC/Mb,EAAAA,EAAAA,KAAA,OAAKoC,QAASA,KAAuB,EAAInC,IAAKoB,EAAS3B,UAAU,qBAAoBmB,UACjFb,EAAAA,EAAAA,KAAA,OAAKN,UAAU,wBAAuBmB,SACjCyB,MAAMC,QAAQ1B,IAAaA,EAAS,WAI/C,E,sDCjFd,MA8DA,EA9DoB2B,KAChB,MAAOC,EAAQC,IAAa3C,EAAAA,EAAAA,WAAkB,IACxC,UAAE4C,EAAS,gBAAEC,EAAe,QAAEC,GAAYC,EAAAA,UAAUC,QACpDC,GAAWC,EAAAA,EAAAA,MACX,KAAEC,IAASC,EAAAA,EAAAA,IAAeC,GAASA,EAAMC,QAAQH,QAEvDtB,EAAAA,EAAAA,YAAU,KCZY0B,WACtB,MAAM,KAAEC,SAAeC,EAAAA,EAAMC,KAAK,eAClC,OAAOF,CAAI,EDWPG,GAAaC,MAAKJ,IACdP,EAASH,EAAQU,IACjBb,GAAU,EAAK,GACjB,GACH,IAOH,OACI1C,EAAAA,EAAAA,KAAA,OAAKN,UAAU,uBAAsBmB,SAEhC4B,EACKS,EAAKU,KAAKC,IACR,MAAMC,GAAOC,EAAAA,EAAAA,IAAQF,EAAGC,KAAM,cAAe,CAAEE,OAAQC,EAAAA,IACvD,OACI9B,EAAAA,EAAAA,MAAA,OAAoBzC,UAAU,0BAAyBmB,SAAA,EACnDb,EAAAA,EAAAA,KAAA,OAAKN,UAAU,kBAAiBmB,UAC5Bb,EAAAA,EAAAA,KAAA,OAAKkE,IAAG,GAAA7D,OAAK8D,EAAAA,GAAO,UAAA9D,OAASwD,EAAGO,OAASC,IAAI,QAEjDrE,EAAAA,EAAAA,KAAA,OAAKN,UAAU,iBAAgBmB,SAAEiD,KACjC9D,EAAAA,EAAAA,KAAA,OAAKN,UAAU,iBAAgBmB,SAAEgD,EAAGS,SACpCtE,EAAAA,EAAAA,KAAA,OAAKN,UAAU,iBAAgBmB,SAAEgD,EAAGU,QACpCvE,EAAAA,EAAAA,KAAA,OAAKN,UAAU,mBAAkBmB,UAC7Bb,EAAAA,EAAAA,KAACwE,EAAAA,EAAO,CAACpC,QAASA,KApBtBqC,QAoB6CZ,EAAGa,IAnBpE1B,EAASJ,GAAgB,IACzBI,EAASL,EAAU8B,GAkBqD,EAAI/E,UAAU,aAAYmB,SAAC,4HAG/Eb,EAAAA,EAAAA,KAAA,OAAKN,UAAU,mCAAkCmB,UAC7CsB,EAAAA,EAAAA,MAACwC,EAAY,CAACzD,eAAe,OAAML,SAAA,EAC/BsB,EAAAA,EAAAA,MAAA,OAAKzC,UAAU,uBAAsBmB,SAAA,CAAEgD,EAAGe,SAASC,OAAO,gFAC1D7E,EAAAA,EAAAA,KAAA,OAAKN,UAAU,sBAAqBmB,SAC/BgD,EAAGe,SAAShB,KAAKkB,IACd3C,EAAAA,EAAAA,MAAA,OAAmBzC,UAAU,sBAAqBmB,SAAA,EAC9CsB,EAAAA,EAAAA,MAAA,OAAKzC,UAAU,sBAAqBmB,SAAA,CAAEiE,EAAIC,KAAK,IAAED,EAAIE,YACrDhF,EAAAA,EAAAA,KAAA,OAAKN,UAAU,sBAAqBmB,SAAEiE,EAAIP,SAFpCO,EAAIJ,gBAhBxBb,EAAGS,MA2BP,KAIZtE,EAAAA,EAAAA,KAACiF,EAAAA,EAAM,KAEX,EE3Dd,EATiBC,KAETlF,EAAAA,EAAAA,KAAA,OAAKN,UAAU,aAAYmB,UACvBb,EAAAA,EAAAA,KAACwC,EAAW,M,wBCCxB,MAsDA,EAtDgB2C,KACZ,MAAOC,EAAWC,IAAgBtF,EAAAA,EAAAA,UAAsC,OACjEuF,EAAUC,IAAexF,EAAAA,EAAAA,UAAwB,KACjDyF,EAASC,IAAc1F,EAAAA,EAAAA,WAAkB,IACzC2F,EAAMC,IAAW5F,EAAAA,EAAAA,UAAsB,OACvCwE,EAAMqB,IAAW7F,EAAAA,EAAAA,UAAiB,KAClCuE,EAAOuB,IAAY9F,EAAAA,EAAAA,UAAiB,KACrC,KAAEmD,IAASC,EAAAA,EAAAA,IAAeC,GAASA,EAAMC,QAAQH,QACjD,QAAEL,EAAO,aAAEiD,GAAiBhD,EAAAA,UAAUC,QACtCC,GAAWC,EAAAA,EAAAA,KA0CjB,MAAO,CAAE8C,SAxCSxF,IACd,MAAMyF,EAAS,IAAIC,WACf1F,EAAEI,OAAOuF,OAAS3F,EAAEI,OAAOuF,MAAMrB,OAAS,IAC1CmB,EAAOG,cAAc5F,EAAEI,OAAOuF,MAAM,IACpCP,EAAQpF,EAAEI,OAAOuF,MAAM,IACvBF,EAAOI,UAAY,KACff,EAAaW,EAAOK,QACpBd,EAAYhF,EAAEI,OAAOuF,OAAS3F,EAAEI,OAAOuF,MAAM,GAAGnB,MAChDU,GAAW,EAAK,EAExB,EA8Bea,UA3BDA,KACdb,GAAW,GACXJ,EAAa,MACbE,EAAY,MACZI,EAAQ,KAAK,EAuBaY,SApBbA,KACb,GAAc,KAAVjC,GAAyB,KAATC,GAAwB,OAATmB,EAAe,CAC9C,MAAMc,EAAY,IAAIC,SACtBD,EAAUE,OAAO,QAASpC,GAC1BkC,EAAUE,OAAO,OAAQnC,GACzBiC,EAAUE,OAAO,QAAShB,GFxCfpC,WACnB,MAAM,KAAEC,SAAeC,EAAAA,EAAMC,KAAK,OAAQkD,GAC1C,OAAOpD,CAAI,EEuCHqD,CAAQJ,GAAW7C,MAAKJ,IACpBsC,EAAS,IACTD,EAAQ,IACRD,EAAQ,MACRN,EAAa,MACbI,GAAW,GACXzC,EAASH,EAAQ,IAAIK,EAAMK,KAC3BP,EAAS8C,GAAa,GAAO,GAErC,MACIe,MAAM,gHACV,EAGoCzB,YAAWE,WAAUE,UAASjB,OAAMD,QAAOsB,UAASC,WAAU,E,cChD1G,MA+CA,EA/CqBiB,KACjB,MAAM,UAAEC,IAAc5D,EAAAA,EAAAA,IAAeC,GAASA,EAAMC,QAAQH,QACtD,aAAE4C,GAAiBhD,EAAAA,UAAUC,QAC7BC,GAAWC,EAAAA,EAAAA,KACX+D,GAAWpH,EAAAA,EAAAA,QAAyB,OACpC,MAAE0E,EAAK,KAAEC,EAAI,SAAEwB,EAAQ,SAAET,EAAQ,QAAEE,EAAO,UAAEJ,EAAS,UAAEkB,EAAS,SAAEC,EAAQ,QAAEX,EAAO,SAAEC,GAAaV,IAUxG,OACInF,EAAAA,EAAAA,KAACiH,EAAAA,EAAK,CAAC9F,OAAQ4F,EAAWG,UALR3G,IAClByC,EAAS8C,EAAavF,GAAG,EAI0B4G,WAAW,UAAStG,UACnEsB,EAAAA,EAAAA,MAAA,OAAKzC,UAAU,eAAcmB,SAAA,EACzBb,EAAAA,EAAAA,KAAA,OAAKN,UAAU,oBAAmBmB,UAC9Bb,EAAAA,EAAAA,KAACoH,EAAAA,EAAK,CAAC7H,MAAO+E,EAAO+C,OAAQxB,EAAUyB,WAAW,kBAAkB7H,YAAY,kEAEpFO,EAAAA,EAAAA,KAAA,OAAKN,UAAU,qBAAoBmB,UAC/Bb,EAAAA,EAAAA,KAACuH,EAAAA,EAAU,CAAChI,MAAOgF,EAAM/E,SAAUoG,EAASnG,YAAY,iCAAQC,UAAU,8BAE9EyC,EAAAA,EAAAA,MAAA,OAAKzC,UAAU,uBAAsBmB,SAAA,EACjCsB,EAAAA,EAAAA,MAAA,OAAKzC,UAAU,sBAAqBmB,SAAA,EAChCb,EAAAA,EAAAA,KAAA,SAAOC,IAAK+G,EAAU1G,SAAUyF,EAAUyB,KAAK,OAAO9H,UAAU,wBAChEM,EAAAA,EAAAA,KAAA,OAAKN,UAAU,kBAAiBmB,UAC5BsB,EAAAA,EAAAA,MAACqC,EAAAA,EAAO,CAACpC,QArBXqF,KAAO,IAADC,EACR,QAAhBA,EAAAV,EAASxG,eAAO,IAAAkH,GAAhBA,EAAkBC,OAAO,EAoB4BjI,UAAU,aAAYmB,SAAA,CAAEyE,EAAQ,GAAAjF,OAAMiF,GAAa,gHAAsB,aAGlHtF,EAAAA,EAAAA,KAAA,OAAKN,UAAW8F,EAAU,mCAAqC,4BAA4B3E,UACvFsB,EAAAA,EAAAA,MAAA,OAAKzC,UAAU,sBAAqBmB,SAAA,EAChCb,EAAAA,EAAAA,KAAA,QAAMoC,QAASkE,EAAW5G,UAAU,4BACnC0F,IAAapF,EAAAA,EAAAA,KAAA,OAAKkE,IAAKkB,EAAUwC,WAAYvD,IAAI,cAK9DrE,EAAAA,EAAAA,KAAA,OAAKN,UAAU,uBAAsBmB,UACjCb,EAAAA,EAAAA,KAACwE,EAAAA,EAAO,CAACpC,QAASmE,EAAU7G,UAAU,aAAYmB,SAAC,iEAGvD,ECbhB,EAjCmBgH,KACf,MAAM,KAAEC,IAAS3E,EAAAA,EAAAA,IAAeC,GAASA,EAAMC,QAAQ0E,WACjD,OAAEC,EAAM,KAAE9E,IAASC,EAAAA,EAAAA,IAAeC,GAASA,EAAMC,QAAQH,QACzD,QAAEL,EAAO,gBAAED,GAAoBE,EAAAA,UAAUC,SACxCgC,EAAMkD,IAAWlI,EAAAA,EAAAA,UAAiB+H,EAAK/C,OACvCC,EAASkD,IAAcnI,EAAAA,EAAAA,UAAiB+H,EAAK9C,UAC7CmD,EAAaC,IAAkBrI,EAAAA,EAAAA,UAAiB,IACjDiD,GAAWC,EAAAA,EAAAA,KAuBjB,MAAO,CAAEgF,UAASC,aAAYE,iBAAgBC,iBArBrBA,KACR,KAATtD,GAA2B,KAAZC,GAAkC,KAAhBmD,EJLnB7E,WACtB,MAAM,KAAEC,SAAeC,EAAAA,EAAMC,KAAK,kBAAmBkD,GACrD,OAAOpD,CAAI,EIIH+E,CAAW,CAAEvD,OAAMC,UAAST,KAAM4D,EAAajF,KAAM8E,IAAUrE,MAAKJ,IAChE,IAAIgF,EAAW,IAAIrF,GAEnBqF,EAAWA,EAAS3E,KAAKC,IACrB,GAAIA,EAAGa,MAAQsD,EAAQ,CACnB,MAAMQ,EAAMC,KAAKC,MAAMD,KAAKE,UAAU9E,IAEtC,OADA2E,EAAI5D,SAASgE,KAAKrF,GACXiF,CACX,CACA,OAAO3E,CAAE,IAEbb,EAASH,EAAQ0F,IACjBvF,EAASJ,GAAgB,GAAO,IAGpCiE,MAAM,gHACV,EAG4D7B,UAASmD,cAAapD,OAAM,ECIhG,EAhCqB8D,KACjB,MAAM,aAAEC,IAAiB3F,EAAAA,EAAAA,IAAeC,GAASA,EAAMC,QAAQH,QACzD,gBAAEN,GAAoBE,EAAAA,UAAUC,QAChCC,GAAWC,EAAAA,EAAAA,MAMX,iBAAEoF,EAAgB,QAAEJ,EAAO,WAAEC,EAAU,eAAEE,EAAc,QAAEpD,EAAO,YAAEmD,EAAW,KAAEpD,GAAS8C,IAE9F,OACI7H,EAAAA,EAAAA,KAACiH,EAAAA,EAAK,CAAC9F,OAAQ2H,EAAc5B,UAPR3G,IACrByC,EAASJ,EAAgBrC,GAAG,EAM6B4G,WAAW,UAAStG,UACzEsB,EAAAA,EAAAA,MAAA,OAAKzC,UAAU,eAAcmB,SAAA,EACzBsB,EAAAA,EAAAA,MAAA,OAAKzC,UAAU,oBAAmBmB,SAAA,EAC9Bb,EAAAA,EAAAA,KAACoH,EAAAA,EAAK,CAAC7H,MAAOwF,EAAMsC,OAAQY,EAASX,WAAW,kBAAkB7H,YAAY,2BAC9EO,EAAAA,EAAAA,KAACoH,EAAAA,EAAK,CAAC7H,MAAOyF,EAASqC,OAAQa,EAAYZ,WAAW,kBAAkB7H,YAAY,sDAExFO,EAAAA,EAAAA,KAAA,OAAKN,UAAU,qBAAoBmB,UAC/Bb,EAAAA,EAAAA,KAACuH,EAAAA,EAAU,CAAChI,MAAO4I,EAAa3I,SAAU4I,EAAgB3I,YAAY,iCAAQC,UAAU,8BAG5FM,EAAAA,EAAAA,KAAA,OAAKN,UAAU,uBAAsBmB,UACjCb,EAAAA,EAAAA,KAACwE,EAAAA,EAAO,CAACpC,QAASiG,EAAkB3I,UAAU,aAAYmB,SAAC,iEAK/D,E,aC5BhB,MAqBA,EArBiBkI,KACb,MAAM,aAAEjD,GAAiBhD,EAAAA,UAAUC,QAC7BC,GAAWC,EAAAA,EAAAA,KAKjB,OACId,EAAAA,EAAAA,MAAA,OAAKzC,UAAU,OAAMmB,SAAA,EACjBsB,EAAAA,EAAAA,MAAA,OAAKzC,UAAU,kBAAiBmB,SAAA,EAC5Bb,EAAAA,EAAAA,KAACgJ,EAAAA,EAAU,CAAClI,gBAAgB,OAAMD,SAAC,8IACnCsB,EAAAA,EAAAA,MAAA,OAAKzC,UAAU,cAAamB,SAAA,EAACb,EAAAA,EAAAA,KAAA,QAAAa,SAAM,+CAAc,wDACjDb,EAAAA,EAAAA,KAAA,OAAKN,UAAU,eAAcmB,UAACb,EAAAA,EAAAA,KAACwE,EAAAA,EAAO,CAACpC,QAR7B6G,KAClBjG,EAAS8C,GAAa,GAAM,EAO2CpG,UAAU,aAAYmB,SAAC,mGACtFb,EAAAA,EAAAA,KAACkF,EAAQ,QAEblF,EAAAA,EAAAA,KAAC8G,EAAY,KACb9G,EAAAA,EAAAA,KAAC6I,EAAY,MACX,ECdd,EARaK,KAELlJ,EAAAA,EAAAA,KAACmJ,EAAAA,EAAM,CAAAtI,UACHb,EAAAA,EAAAA,KAAC+I,EAAQ,K","sources":["components/UI/myTextArea/MyTextArea.tsx","components/UI/navigation/Navigation.tsx","components/UI/accordionOne/AccordionOne.tsx","components/news/bodyNews/elementNews/ElementNews.tsx","https/newsApi.ts","components/news/bodyNews/BodyNews.tsx","hooks/useNews.tsx","components/news/raitingModal/NewsModal.tsx","hooks/useComment.tsx","components/news/commentModal/CommentModal.tsx","components/news/MainNews.tsx","pages/News.tsx"],"sourcesContent":["import React, { useRef, useState } from 'react'\r\nimport './myTextArea.scss'\r\ninterface IMyTextArea {\r\n    value: string\r\n    setValue: (e: string) => void\r\n    placeholder?: string | undefined\r\n    className?: string\r\n}\r\nconst MyTextArea = ({ value, setValue, placeholder = '', className = '' }: IMyTextArea) => {\r\n    const textAreaRef = useRef<HTMLTextAreaElement>(null)\r\n    const [focus, setFocus] = useState(false)\r\n    const onFocus = () => {\r\n        setFocus(true)\r\n    }\r\n\r\n    const onBlur = () => {\r\n        setFocus(false)\r\n    }\r\n\r\n    const change = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n        textAreaRef.current && (textAreaRef.current.style.height = 'auto')\r\n        textAreaRef.current && (textAreaRef.current.style.height = `${e.target.scrollHeight}px`)\r\n        setValue(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <textarea\r\n            ref={textAreaRef}\r\n            rows={1}\r\n            onFocus={onFocus}\r\n            onBlur={onBlur}\r\n            className={`MyTextArea ${className} ${focus ? 'active' : ''}`}\r\n            value={value}\r\n            onChange={change}\r\n            placeholder={placeholder}>\r\n        </textarea>\r\n    )\r\n}\r\n\r\nexport default MyTextArea\r\n","import React, { type FC, type ReactNode } from 'react'\r\nimport './navigation.scss'\r\ninterface FooterProps {\r\n    name?: string\r\n    children?: ReactNode\r\n    changeName?: boolean\r\n    lock?: boolean\r\n    navigationClass?: string\r\n}\r\nconst Navigation: FC<FooterProps> = ({ children, navigationClass = 'origin' }) => {\r\n    return (\r\n        <div className={`Navigation ${navigationClass}`}>{children}</div>\r\n\r\n    )\r\n}\r\n\r\nexport default Navigation\r\n","import React, { useCallback, useEffect, useRef, useState, type FC } from 'react'\r\nimport './accordionOne.scss'\r\n\r\ninterface FooterProps {\r\n    breakpoint?: number\r\n    children?: React.ReactNode\r\n    oneOpen?: boolean\r\n    setVisibleAccordion?: (a: boolean) => void\r\n    accordionClass?: string\r\n}\r\n\r\nconst AccordionOne: FC<FooterProps> = ({ breakpoint = 8000, children, oneOpen = false, setVisibleAccordion, accordionClass = 'origin' }) => {\r\n    const [active, setactive] = useState(false)\r\n    const itemRef = useRef<any>()\r\n    const accordRef = useRef<any>()\r\n    // при нажатии на один аккордион другой закрывается\r\n\r\n    // закрытие или открытие всех аккордионов при брейкпоинте\r\n    const ff2 = useCallback(\r\n        () => {\r\n            const clientWidth = window.innerWidth\r\n            if (clientWidth <= breakpoint) {\r\n                setactive(false)\r\n            } else {\r\n                setactive(true)\r\n            }\r\n        },\r\n        []\r\n    )\r\n\r\n    // определяет открыты или закрыты все аккордионы в начале\r\n    useEffect(() => {\r\n        const clientWidth = window.innerWidth\r\n\r\n        if (clientWidth <= breakpoint) {\r\n            setactive(false)\r\n        } else {\r\n            setactive(true)\r\n        }\r\n\r\n        window.addEventListener('resize', ff2)\r\n        return () => {\r\n            window.removeEventListener('resize', ff2)\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        itemRef.current.style.height = '0px'\r\n        window.addEventListener('resize', gg)\r\n        return () => {\r\n            window.removeEventListener('resize', gg)\r\n        }\r\n    }, [])\r\n\r\n    const gg = () => {\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        // setVisibleAccordion(false)\r\n        if (active) {\r\n            // itemRef.current.style.boxSizing = 'content-box'\r\n            itemRef.current.style.height = `${itemRef.current.scrollHeight}px`\r\n            setTimeout(() => {\r\n                itemRef.current.style.height = 'auto'\r\n            }, 300)\r\n        } else {\r\n            console.log('777777', active)\r\n\r\n            itemRef.current.style.height = `${itemRef.current.scrollHeight}px`\r\n            setTimeout(() => {\r\n                itemRef.current.style.height = '0px'\r\n            }, 5)\r\n        }\r\n    }, [active])\r\n\r\n    const changeOnClick = () => {\r\n\r\n        // itemRef.current.style.height= 'auto'\r\n        // itemRef.current.style.boxSizing = 'border-box'\r\n        // itemRef.current.style.height =`${itemRef.current.scrollHeight}px`\r\n    }\r\n\r\n    return (\r\n        <div ref={accordRef} className={`AccordionOne ${accordionClass}`}>\r\n            <div className='AccordionOne__bodyCover' >\r\n                <div onClick={() => { setactive((prev) => !prev) }} className={active ? 'AccordionOne__button  active _icon-arrow-next active' : 'AccordionOne__button _icon-arrow-next'}>{Array.isArray(children) && children[0]}</div>\r\n                <div onClick={() => { changeOnClick() }} ref={itemRef} className=\"AccordionOne__body\">\r\n                    <div className=\"AccordionOne__bodytwo\">\r\n                        {Array.isArray(children) && children[1]}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AccordionOne\r\n","import { useState, useEffect } from 'react'\r\nimport { getAllNews } from '../../../../https/newsApi'\r\nimport { newsSlice } from '../../../../store2/reducers/NewsSlice'\r\nimport { API_URL } from '../../../../utils/config'\r\nimport AccordionOne from '../../../UI/accordionOne/AccordionOne'\r\nimport Loader from '../../../UI/loader/Loader'\r\nimport { useAppDispatch, useAppSelector } from '../../../../hooks/reduxHooks'\r\nimport './elementNews.scss'\r\nimport format from 'date-fns/format'\r\nimport { ru } from 'date-fns/locale'\r\nimport Button2 from '../../../UI/button2/Button2'\r\n\r\nconst ElementNews = () => {\r\n    const [loader, setloader] = useState<boolean>(false)\r\n    const { setNewsId, setModalCooment, setNews } = newsSlice.actions\r\n    const dispatch = useAppDispatch()\r\n    const { news } = useAppSelector(state => state.reducer.news)\r\n\r\n    useEffect(() => {\r\n        getAllNews().then(data => {\r\n            dispatch(setNews(data))\r\n            setloader(true)\r\n        })\r\n    }, [])\r\n\r\n    const modalCommentId = (id: any) => {\r\n        dispatch(setModalCooment(true))\r\n        dispatch(setNewsId(id))\r\n    }\r\n\r\n    return (\r\n        <div className=\"News__main main-news\">\r\n\r\n            {loader\r\n                ? news.map((el: any) => {\r\n                    const date = format(+el.date, 'd MMMM yyyy', { locale: ru })\r\n                    return (\r\n                        <div key={el.title} className=\"main-news__new new-main\">\r\n                            <div className=\"new-main__image\">\r\n                                <img src={`${API_URL}/news/${el.image}`} alt=\"\"/>\r\n                            </div>\r\n                            <div className=\"new-main__date\">{date}</div>\r\n                            <div className=\"new-main__name\">{el.title}</div>\r\n                            <div className=\"new-main__text\">{el.text}</div>\r\n                            <div className=\"new-main__button\">\r\n                                <Button2 onClick={() => { modalCommentId(el._id) }} className='buttonCart'>Добавить комментарий </Button2>\r\n                            </div>\r\n\r\n                            <div className=\"new-main__cooments comments-main\">\r\n                                <AccordionOne accordionClass='news'>\r\n                                    <div className=\"comments-main__value\">{el.comments.length} комментариев</div>\r\n                                    <div className=\"comments-main__body\">\r\n                                        {el.comments.map((com: any) =>\r\n                                            <div key={com._id} className=\"comments-main__item\">\r\n                                                <div className=\"comments-main__name\">{com.name} {com.sername}</div>\r\n                                                <div className=\"comments-main__text\">{com.text}</div>\r\n                                            </div>\r\n                                        )}\r\n\r\n                                    </div>\r\n                                </AccordionOne>\r\n\r\n                            </div>\r\n\r\n                        </div>)\r\n                }\r\n\r\n                )\r\n                : <Loader/>}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ElementNews\r\n","import { $host } from '.'\r\n\r\nexport const addNews = async (info: any) => {\r\n    const { data } = await $host.post('news', info)\r\n    return data\r\n}\r\nexport const getAllNews = async () => {\r\n    const { data } = await $host.post('news/getAll')\r\n    return data\r\n}\r\n\r\nexport const addComment = async (info: any) => {\r\n    const { data } = await $host.post('news/addComment', info)\r\n    return data\r\n}\r\n","import ElementNews from './elementNews/ElementNews'\r\n\r\nconst BodyNews = () => {\r\n    return (\r\n        <div className=\"News__body\">\r\n            <ElementNews/>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BodyNews\n","import type React from 'react'\r\nimport { useState } from 'react'\r\nimport { addNews } from '../https/newsApi'\r\nimport { useAppDispatch, useAppSelector } from './reduxHooks'\r\nimport { newsSlice } from '../store2/reducers/NewsSlice'\r\n\r\nconst useNews = () => {\r\n    const [fileImage, setFileImage] = useState<string | ArrayBuffer | null>(null)\r\n    const [fileName, setFileName] = useState<string | null>('')\r\n    const [fileDiv, setFileDiv] = useState<boolean>(false)\r\n    const [file, setfile] = useState<File | null>(null)\r\n    const [text, settext] = useState<string>('')\r\n    const [title, settitle] = useState<string>('')\r\n    const { news } = useAppSelector(state => state.reducer.news)\r\n    const { setNews, setModalNews } = newsSlice.actions\r\n    const dispatch = useAppDispatch()\r\n\r\n    const fileload = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const reader = new FileReader()\r\n        if (e.target.files && e.target.files.length > 0) {\r\n            reader.readAsDataURL(e.target.files[0])\r\n            setfile(e.target.files[0])\r\n            reader.onloadend = () => {\r\n                setFileImage(reader.result)\r\n                setFileName(e.target.files && e.target.files[0].name)\r\n                setFileDiv(true)\r\n            }\r\n        }\r\n    }\r\n\r\n    const clearFile = () => {\r\n        setFileDiv(false)\r\n        setFileImage(null)\r\n        setFileName(null)\r\n        setfile(null)\r\n    }\r\n\r\n    const sendNews = () => {\r\n        if (title !== '' && text !== '' && file !== null) {\r\n            const formaData = new FormData()\r\n            formaData.append('title', title)\r\n            formaData.append('text', text)\r\n            formaData.append('image', file)\r\n            addNews(formaData).then(data => {\r\n                settitle('')\r\n                settext('')\r\n                setfile(null)\r\n                setFileImage(null)\r\n                setFileDiv(false)\r\n                dispatch(setNews([...news, data]))\r\n                dispatch(setModalNews(false))\r\n            })\r\n        } else {\r\n            alert('недостаточно данных')\r\n        }\r\n    }\r\n\r\n    return { fileload, clearFile, sendNews, fileImage, fileName, fileDiv, text, title, settext, settitle }\r\n}\r\n\r\nexport default useNews\r\n","import { useRef } from 'react'\r\nimport { Modal } from '../../UI/modal/Modal'\r\nimport Input from '../../UI/input/Input'\r\nimport { newsSlice } from '../../../store2/reducers/NewsSlice'\r\nimport useNews from '../../../hooks/useNews'\r\nimport { useAppDispatch, useAppSelector } from '../../../hooks/reduxHooks'\r\nimport Button2 from '../../UI/button2/Button2'\r\nimport MyTextArea from '../../UI/myTextArea/MyTextArea'\r\nimport '../news.scss'\r\nconst RaitingModal = () => {\n    const { modalNews } = useAppSelector(state => state.reducer.news)\r\n    const { setModalNews } = newsSlice.actions\r\n    const dispatch = useAppDispatch()\r\n    const inputRef = useRef<HTMLInputElement>(null)\r\n    const { title, text, fileload, fileName, fileDiv, fileImage, clearFile, sendNews, settext, settitle } = useNews()\r\n\r\n    const activateInput = () => {\r\n        inputRef.current?.click()\r\n    }\r\n\r\n    const dispatchNews = (e: boolean) => {\r\n        dispatch(setModalNews(e))\r\n    }\r\n\r\n    return (\r\n        <Modal active={modalNews} setActive={dispatchNews} modalClass='raiting'>\r\n            <div className=\"RaitingModal\">\r\n                <div className=\"RaitingModal__top\">\r\n                    <Input value={title} change={settitle} inputClass='registration gv' placeholder='Заголовок   *'/>\r\n                </div>\r\n                <div className=\"RaitingModal__text\">\r\n                    <MyTextArea value={text} setValue={settext} placeholder='текст' className='RaitingModal__textarea'/>\r\n                </div>\r\n                <div className=\"RaitingModal__images\">\r\n                    <div className=\"RaitingModal__label\">\r\n                        <input ref={inputRef} onChange={fileload} type=\"file\" className=\"RaitingModal__file\" />\r\n                        <div className=\"RaitingModal__l\">\r\n                            <Button2 onClick={activateInput} className='buttonCart'>{fileName ? `${fileName}` : 'Выбрать изображение'} </Button2>\r\n                        </div>\r\n                    </div>\r\n                    <div className={fileDiv ? 'RaitingModal__imageCover active ' : 'RaitingModal__imageCover '}>\r\n                        <div className=\"RaitingModal__image\">\r\n                            <span onClick={clearFile} className='icon-clear _icon-delete'></span>\r\n                            {fileImage && <img src={fileImage.toString()} alt=\"\"/>}\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"RaitingModal__button\">\r\n                    <Button2 onClick={sendNews} className='buttonCart'>Отправить</Button2>\r\n                </div>\r\n            </div>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default RaitingModal\n","import { useState } from 'react'\r\nimport { addComment } from '../https/newsApi'\r\nimport { useAppDispatch, useAppSelector } from './reduxHooks'\r\nimport { newsSlice } from '../store2/reducers/NewsSlice'\r\nimport { type INews } from '../utils/interfaces'\r\n\r\nconst useComment = () => {\r\n    const { user } = useAppSelector(state => state.reducer.catalog)\r\n    const { newsId, news } = useAppSelector(state => state.reducer.news)\r\n    const { setNews, setModalCooment } = newsSlice.actions\r\n    const [name, setname] = useState<string>(user.name)\r\n    const [sername, setsername] = useState<string>(user.sername)\r\n    const [textComment, settextComment] = useState<string>('')\r\n    const dispatch = useAppDispatch()\r\n\r\n    const addCommentToNews = () => {\r\n        if (name !== '' && sername !== '' && textComment !== '') {\r\n            addComment({ name, sername, text: textComment, news: newsId }).then(data => {\r\n                let thisNews = [...news]\r\n\r\n                thisNews = thisNews.map((el: INews) => {\r\n                    if (el._id === newsId) {\r\n                        const el2 = JSON.parse(JSON.stringify(el))\r\n                        el2.comments.push(data)\r\n                        return el2\r\n                    }\r\n                    return el\r\n                })\r\n                dispatch(setNews(thisNews))\r\n                dispatch(setModalCooment(false))\r\n            })\r\n        } else {\r\n            alert('недостаточно данных')\r\n        }\r\n    }\r\n\r\n    return { setname, setsername, settextComment, addCommentToNews, sername, textComment, name }\r\n}\r\n\r\nexport default useComment\n","import Input from '../../UI/input/Input'\r\nimport { Modal } from '../../UI/modal/Modal'\r\nimport useComment from '../../../hooks/useComment'\r\nimport { newsSlice } from '../../../store2/reducers/NewsSlice'\r\nimport { useAppDispatch, useAppSelector } from '../../../hooks/reduxHooks'\r\nimport Button2 from '../../UI/button2/Button2'\r\nimport MyTextArea from '../../UI/myTextArea/MyTextArea'\r\n\r\nconst CommentModal = () => {\n    const { modalCooment } = useAppSelector(state => state.reducer.news)\r\n    const { setModalCooment } = newsSlice.actions\r\n    const dispatch = useAppDispatch()\r\n\r\n    const disptachComment = (e: boolean) => {\r\n        dispatch(setModalCooment(e))\r\n    }\r\n\r\n    const { addCommentToNews, setname, setsername, settextComment, sername, textComment, name } = useComment()\r\n\r\n    return (\r\n        <Modal active={modalCooment} setActive={disptachComment} modalClass='raiting'>\r\n            <div className=\"RaitingModal\">\r\n                <div className=\"RaitingModal__top\">\r\n                    <Input value={name} change={setname} inputClass='registration gv' placeholder='Имя  *'/>\r\n                    <Input value={sername} change={setsername} inputClass='registration gv' placeholder='Фамилия  *'/>\r\n                </div>\r\n                <div className=\"RaitingModal__text\">\r\n                    <MyTextArea value={textComment} setValue={settextComment} placeholder='отзыв' className='RaitingModal__textarea'/>\r\n\r\n                </div>\r\n                <div className=\"RaitingModal__button\">\r\n                    <Button2 onClick={addCommentToNews} className='buttonCart'>Отправить</Button2>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default CommentModal\n","import BodyNews from './bodyNews/BodyNews'\r\nimport RaitingModal from './raitingModal/NewsModal'\r\nimport CommentModal from './commentModal/CommentModal'\r\nimport Navigation from '../UI/navigation/Navigation'\r\nimport { newsSlice } from '../../store2/reducers/NewsSlice'\r\nimport { useAppDispatch } from '../../hooks/reduxHooks'\r\nimport './news.scss'\r\nimport Button2 from '../UI/button2/Button2'\r\nconst MainNews = () => {\n    const { setModalNews } = newsSlice.actions\r\n    const dispatch = useAppDispatch()\r\n\r\n    const dispatchModal = () => {\r\n        dispatch(setModalNews(true))\r\n    }\r\n    return (\r\n        <div className=\"News\">\r\n            <div className=\"News__container\">\r\n                <Navigation navigationClass='news'>Главная / Новости компании</Navigation>\r\n                <div className=\"News__title\"><span>Новости</span> Компании</div>\r\n                <div className=\"News__button\"><Button2 onClick={dispatchModal} className='buttonCart'>добавить новость</Button2></div>\r\n                <BodyNews/>\r\n            </div>\r\n            <RaitingModal/>\r\n            <CommentModal/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MainNews\n","import Layout from '../app/Layout'\r\nimport MainNews from '../components/news/MainNews'\r\n\r\nconst News = () => {\r\n    return (\r\n        <Layout>\r\n            <MainNews/>\r\n        </Layout>\r\n    )\r\n}\r\n\r\nexport default News\n"],"names":["_ref","value","setValue","placeholder","className","textAreaRef","useRef","focus","setFocus","useState","_jsx","ref","rows","onFocus","onBlur","concat","onChange","e","current","style","height","target","scrollHeight","children","navigationClass","breakpoint","oneOpen","setVisibleAccordion","accordionClass","active","setactive","itemRef","accordRef","ff2","useCallback","clientWidth","window","innerWidth","useEffect","addEventListener","removeEventListener","gg","setTimeout","console","log","_jsxs","onClick","prev","Array","isArray","ElementNews","loader","setloader","setNewsId","setModalCooment","setNews","newsSlice","actions","dispatch","useAppDispatch","news","useAppSelector","state","reducer","async","data","$host","post","getAllNews","then","map","el","date","format","locale","ru","src","API_URL","image","alt","title","text","Button2","id","_id","AccordionOne","comments","length","com","name","sername","Loader","BodyNews","useNews","fileImage","setFileImage","fileName","setFileName","fileDiv","setFileDiv","file","setfile","settext","settitle","setModalNews","fileload","reader","FileReader","files","readAsDataURL","onloadend","result","clearFile","sendNews","formaData","FormData","append","info","addNews","alert","RaitingModal","modalNews","inputRef","Modal","setActive","modalClass","Input","change","inputClass","MyTextArea","type","activateInput","_inputRef$current","click","toString","useComment","user","catalog","newsId","setname","setsername","textComment","settextComment","addCommentToNews","addComment","thisNews","el2","JSON","parse","stringify","push","CommentModal","modalCooment","MainNews","Navigation","dispatchModal","News","Layout"],"sourceRoot":""}